cmake_minimum_required(VERSION 3.6)

set(ANIMUS_PROJECT_NAME "Animus" CACHE STRING "The name of the project")
set(ANIMUS_PROJECT_DESCRIPTION "A cross compiling cmake project" CACHE STRING "The description of the project")
set(ANIMUS_PROJECT_AUTHOR "Steve Gerbino" CACHE STRING "The project author")
set(ANIMUS_PROJECT_AUTHOR_EMAIL "steve@gerbino.co" CACHE STRING "The project authors email")
set(ANIMUS_PROJECT_YEAR_COPYRIGHT "2017" CACHE STRING "The copyright date")
set(ANIMUS_PROJECT_IDENTIFIER "io.github.animus" CACHE STRING "The project identifier")
set(ANIMUS_WITH_JNI ON CACHE BOOL "Build project with JNI support")
set(ANIMUS_CPP_NAMESPACE "animus_generated" CACHE STRING "Namespace of the generated C++")
set(ANIMUS_JAVA_PACKAGE "io.github.animus" CACHE STRING "Namespace of the generated Java package")
set(ANIMUS_JNI_NAMESPACE "animus_jni" CACHE STRING "Namespace of the generated JNI C++")
set(ANIMUS_OBJC_TYPE_PREFIX "" CACHE STRING "Prefix for generated Objective-C code")
set(ANIMUS_OBJCPP_NAMESPACE "animus_objc" CACHE STRING "Namespace of the generated Objective-C")
set(ANIMUS_IDENT_CPP_ENUM "foo_bar" CACHE STRING "C++ enumeration style")
set(ANIMUS_IDENT_CPP_FIELD "foo_bar" CACHE STRING "C++ field style")
set(ANIMUS_IDENT_CPP_METHOD "foo_bar" CACHE STRING "C++ method style")
set(ANIMUS_IDENT_CPP_ENUM_TYPE "foo_bar" CACHE STRING "C++ enumeration type style")
set(ANIMUS_IDENT_CPP_TYPE_PARAM "foo_bar" CACHE STRING "C++ parameter type style")
set(ANIMUS_IDENT_CPP_LOCAL "foo_bar" CACHE STRING "C++ local style")
set(ANIMUS_IDENT_CPP_FILE "foo_bar" CACHE STRING "C++ file style")
set(ANIMUS_IDENT_CPP_TYPE "foo_bar" CACHE STRING "C++ type style")
set(ANIMUS_IDENT_JAVA_FIELD "mFooBar" CACHE STRING "Java field style")
set(ANIMUS_IDENT_JNI_CLASS "NativeFooBar" CACHE STRING "JNI class style")
set(ANIMUS_IDENT_JNI_FILE "native_foo_bar" CACHE STRING "JNI file style")
if (${CMAKE_GENERATOR} STREQUAL Xcode)
   set(ANIMUS_WITH_OBJC ON CACHE BOOL "Build project with Objective-C support")
else()
   set(ANIMUS_WITH_OBJC OFF CACHE BOOL "Build project with Objective-C support")
endif()

set(ANIMUS_CMAKE_INCLUDE cmake/include)
set(ANIMUS_CMAKE_MODULES cmake/modules)
set(ANIMUS_SCRIPTS_DIR scripts)
set(ANIMUS_INSTALL_DIR install)
set(ANIMUS_DEPS_DIR deps)
set(ANIMUS_SRC_DIR src)
set(ANIMUS_CPP_SRC_DIR ${ANIMUS_SRC_DIR}/cpp)
set(ANIMUS_OBJC_SRC_DIR ${ANIMUS_SRC_DIR}/objc)
set(ANIMUS_JAVA_SRC_DIR ${ANIMUS_SRC_DIR}/java)
set(ANIMUS_TEST_DIR test)
set(ANIMUS_RC_DIR rc)
set(ANIMUS_DJINNI_DIR ${ANIMUS_RC_DIR}/djinni)
set(ANIMUS_GEN_DIR ${PROJECT_BINARY_DIR}/generated)
set(ANIMUS_INTERFACE_DIR ${ANIMUS_GEN_DIR}/interface)
set(ANIMUS_JNI_DIR ${ANIMUS_GEN_DIR}/jni)
set(ANIMUS_OBJC_DIR ${ANIMUS_GEN_DIR}/objc)
set(ANIMUS_JAVA_DIR ${ANIMUS_GEN_DIR}/java)
set(ANIMUS_INTERFACE_DEFINITION ${PROJECT_SOURCE_DIR}/${ANIMUS_DJINNI_DIR}/interface_definition.djinni)
set(ANIMUS_OBJC_UMBRELLA_HEADER ${ANIMUS_OBJC_DIR}/${ANIMUS_PROJECT_NAME}.h)

set(PROJECT_RUNTIME_OUTPUT_DIRECTORY bin)
set(PROJECT_LIBRARY_OUTPUT_DIRECTORY lib)
set(PROJECT_ARCHIVE_OUTPUT_DIRECTORY lib/static)
set(PROJECT_INCLUDE_OUTPUT_DIRECTORY include)
set(PROJECT_SHARE_OUTPUT_DIRECTORY share)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/${ANIMUS_CMAKE_MODULES} ${CMAKE_SOURCE_DIR}/${ANIMUS_CMAKE_INCLUDE})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_RUNTIME_OUTPUT_DIRECTORY})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_LIBRARY_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_ARCHIVE_OUTPUT_DIRECTORY})

include(Animus)
